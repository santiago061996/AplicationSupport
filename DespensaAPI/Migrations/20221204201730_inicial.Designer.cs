// <auto-generated />
using System;
using IncidentesAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IncidentesAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221204201730_inicial")]
    partial class inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IncidentesAPI.Models.Aplicacion", b =>
                {
                    b.Property<int>("AplicacionesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreasId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoAplicativo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AplicacionesId");

                    b.HasIndex("AreasId");

                    b.ToTable("Aplicaciones");

                    b.HasData(
                        new
                        {
                            AplicacionesId = 1,
                            AreasId = 1,
                            Descripcion = "Contabilidad",
                            TipoAplicativo = "Interno"
                        },
                        new
                        {
                            AplicacionesId = 2,
                            AreasId = 2,
                            Descripcion = "Comercial",
                            TipoAplicativo = "Interno"
                        },
                        new
                        {
                            AplicacionesId = 3,
                            AreasId = 3,
                            Descripcion = "Legal",
                            TipoAplicativo = "Interno"
                        });
                });

            modelBuilder.Entity("IncidentesAPI.Models.AplicacionesDto", b =>
                {
                    b.Property<int>("AplicacionesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoAplicativo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AplicacionesId");

                    b.ToTable("AplicacionesDto");
                });

            modelBuilder.Entity("IncidentesAPI.Models.Area", b =>
                {
                    b.Property<int>("AreasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AreasId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            AreasId = 1,
                            Descripcion = "Contabilidad"
                        },
                        new
                        {
                            AreasId = 2,
                            Descripcion = "Comercial"
                        },
                        new
                        {
                            AreasId = 3,
                            Descripcion = "Legal"
                        },
                        new
                        {
                            AreasId = 4,
                            Descripcion = "Tributario"
                        });
                });

            modelBuilder.Entity("IncidentesAPI.Models.AreasDto", b =>
                {
                    b.Property<int>("AreasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AreasId");

                    b.ToTable("AreasDto");
                });

            modelBuilder.Entity("IncidentesAPI.Models.Incidente", b =>
                {
                    b.Property<int>("IncidenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AplicacionesId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("Prioridad")
                        .HasColumnType("int");

                    b.Property<int>("UsuariosId")
                        .HasColumnType("int");

                    b.HasKey("IncidenteId");

                    b.HasIndex("AplicacionesId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("Incidente");

                    b.HasData(
                        new
                        {
                            IncidenteId = 1,
                            AplicacionesId = 1,
                            Descripcion = "No funciona la herramienta contable",
                            Estado = "Pendiente",
                            Fecha = new DateTime(2022, 12, 4, 15, 17, 29, 845, DateTimeKind.Local).AddTicks(6381),
                            Prioridad = 1,
                            UsuariosId = 1
                        });
                });

            modelBuilder.Entity("IncidentesAPI.Models.IncidentesDto", b =>
                {
                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("Prioridad")
                        .HasColumnType("int");

                    b.HasKey("Descripcion");

                    b.ToTable("IncidentesDto");
                });

            modelBuilder.Entity("IncidentesAPI.Models.Rol", b =>
                {
                    b.Property<int>("RolesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RolesId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RolesId = 1,
                            Descripcion = "Interno"
                        },
                        new
                        {
                            RolesId = 2,
                            Descripcion = "Externo"
                        },
                        new
                        {
                            RolesId = 3,
                            Descripcion = "Soporte"
                        });
                });

            modelBuilder.Entity("IncidentesAPI.Models.RolesDto", b =>
                {
                    b.Property<int>("RolesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RolesId");

                    b.ToTable("RolesDto");
                });

            modelBuilder.Entity("IncidentesAPI.Models.Usuario", b =>
                {
                    b.Property<int>("UsuariosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("UsuariosId");

                    b.HasIndex("RolesId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            UsuariosId = 1,
                            Apellidos = "Rodriguez",
                            Email = "alber@gmaill.com",
                            Nombre = "Alberto",
                            RolesId = 1
                        },
                        new
                        {
                            UsuariosId = 2,
                            Apellidos = "Palacio",
                            Email = "josep@gmail.com",
                            Nombre = "Jose",
                            RolesId = 1
                        },
                        new
                        {
                            UsuariosId = 3,
                            Apellidos = "Ramirez",
                            Email = "mariar@gmail.com",
                            Nombre = "Maria",
                            RolesId = 2
                        },
                        new
                        {
                            UsuariosId = 4,
                            Apellidos = "Salas",
                            Email = "danisa@gmail.com",
                            Nombre = "Daniel",
                            RolesId = 3
                        });
                });

            modelBuilder.Entity("IncidentesAPI.Models.UsuariosDto", b =>
                {
                    b.Property<int>("UsuariosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UsuariosId");

                    b.ToTable("UsuariosDto");
                });

            modelBuilder.Entity("IncidentesAPI.Models.Aplicacion", b =>
                {
                    b.HasOne("IncidentesAPI.Models.Area", "Areas")
                        .WithMany("Aplicaciones")
                        .HasForeignKey("AreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Areas");
                });

            modelBuilder.Entity("IncidentesAPI.Models.Incidente", b =>
                {
                    b.HasOne("IncidentesAPI.Models.Aplicacion", "Aplicaciones")
                        .WithMany("Incidentes")
                        .HasForeignKey("AplicacionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IncidentesAPI.Models.Usuario", "Usuarios")
                        .WithMany("Incidentes")
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aplicaciones");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("IncidentesAPI.Models.Usuario", b =>
                {
                    b.HasOne("IncidentesAPI.Models.Rol", "Roles")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("IncidentesAPI.Models.Aplicacion", b =>
                {
                    b.Navigation("Incidentes");
                });

            modelBuilder.Entity("IncidentesAPI.Models.Area", b =>
                {
                    b.Navigation("Aplicaciones");
                });

            modelBuilder.Entity("IncidentesAPI.Models.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("IncidentesAPI.Models.Usuario", b =>
                {
                    b.Navigation("Incidentes");
                });
#pragma warning restore 612, 618
        }
    }
}
